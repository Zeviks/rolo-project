Hooks - Are very used almost exclusively in react. 

Classes = Is a more general approach, since lots of programming languages are based on OOP. This are the foundations of classes.

Understanding when react is rendering and re-rendering your application is a curcial concept to understand. 

JSX - Was designed in a way that closely resembles HTML, since we're always trying to visualize how our page will look. 
This gives it the functionality of javascript, and the feel of HTML. 


[ State ] : 

State is one of the many ways we can tell react to re-render. Whenever our state has change our page will reload with the update state.

To make use of state we first import it and then use this syntax :

const [nameOfState, setNameOfState] = useState(defaultState);

This is the standard syntax




Due to how reference values work in javascript, the only way react can update state is by it being passed a completly diffrent value/variable. 
In javascript, setting two variables to the same obj does not mean each of does variables has it own object. 
It means that both of does vairables are "pointing" at the object. Meaning if we make a change to that object, the change will be reflected on both variables.

To avoid this is why we have a second argument [state, setState]
                                                        ^^^^^^^

Left = the current state
setState = the new state / value we're updating.

Once react notices that the state has been updated / changed it will immdietly reload the updated component to reflect the change.




